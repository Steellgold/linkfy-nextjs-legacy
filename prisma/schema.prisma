// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TESTER
  USER
}

model Account {
  id                 String    @id @default(cuid())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  role          Role      @default(USER)
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  password      String?

  workspaces     Workspace[]
  workspaceUsers WorkspaceUser[]
}

enum SubscriptionType {
  FREE
  CREATOR
  BULK
}

model Workspace {
  id               String           @id @default(cuid())
  name             String
  description      String?          @default("")
  ownerId          String
  owner            User             @relation(fields: [userId], references: [id])
  subscriptionType SubscriptionType @default(FREE)
  createdAt        DateTime         @default(now())
  workspaceUsers   WorkspaceUser[]
  domains          Domain[]
  links            Link[]
  tags             Tag[]
  linkTreePages    LinkTreePage[]
  userId           String
}

enum WorkspaceUserRole {
  OWNER
  ADMIN
  MEMBER
}

model WorkspaceUser {
  workspaceId String
  userId      String            @unique
  workspace   Workspace         @relation(fields: [workspaceId], references: [id])
  user        User              @relation(fields: [userId], references: [id])
  role        WorkspaceUserRole @default(MEMBER)
  invitedAt   DateTime          @default(now())
}

model Domain {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  domain      String
  links       Link[]
}

model Link {
  id               String        @id @default(cuid())
  shortUrl         String
  workspaceId      String
  workspace        Workspace     @relation(fields: [workspaceId], references: [id])
  linkTreePageId   String?
  linkTreePage     LinkTreePage? @relation(fields: [linkTreePageId], references: [id])
  domainId         String?
  domain           Domain?       @relation(fields: [domainId], references: [id])
  tags             LinkTag[]
  createdAt        DateTime      @default(now())
  maxClicks        Int
  currentClicks    Int           @default(0)
  expirationDate   DateTime?
  password         String?
  errorRedirectUrl String
  iosUrl           String
  androidUrl       String
}

model LinkTag {
  linkId String
  tagId  String
  link   Link   @relation(fields: [linkId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([linkId, tagId])
}

model Tag {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  label       String
  links       LinkTag[]
}

model LinkTreePage {
  id          String    @id @default(cuid())
  title       String
  description String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  theme       String // This can be later converted to an enum
  links       Link[]
}
